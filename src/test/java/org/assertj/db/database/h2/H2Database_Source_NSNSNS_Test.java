/**
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Copyright 2012-2015 the original author or authors.
 */
package org.assertj.db.database.h2;

import org.assertj.core.api.Assertions;
import org.assertj.db.common.NeedReload;
import org.assertj.db.type.Changes;
import org.assertj.db.type.Source;
import org.assertj.db.type.Table;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Locale;
import java.util.UUID;

import static org.assertj.db.api.Assertions.assertThat;
import static org.assertj.db.display.Displaying.display;

/**
 * Test on the H2 database.
 *
 * @author RÃ©gis Pouiller
 */
public class H2Database_Source_NSNSNS_Test extends AbstractH2Test {

  private Source source;

  @Before
  public void init() {
    source = sourceNSNSNS;
  }

  @Test
  @NeedReload
  public void test_Displaying_diplay() {
    Table table = new Table(source, "test");
    Changes changes = new Changes(table).setStartPointNow();
    update();
    changes.setEndPointNow();

    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream3 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream4 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream5 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream6 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream7 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream8 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream9 = new ByteArrayOutputStream();
    ByteArrayOutputStream byteArrayOutputStream10 = new ByteArrayOutputStream();
    display(table).display(new PrintStream(byteArrayOutputStream0))
                  .column().display(new PrintStream(byteArrayOutputStream1))
                  .value().display(new PrintStream(byteArrayOutputStream2))
                  .row().display(new PrintStream(byteArrayOutputStream3))
                  .value().display(new PrintStream(byteArrayOutputStream4))
    ;
    display(changes).display(new PrintStream(byteArrayOutputStream5))
                    .change().display(new PrintStream(byteArrayOutputStream6))
                    .rowAtEndPoint().display(new PrintStream(byteArrayOutputStream7))
                    .value().display(new PrintStream(byteArrayOutputStream8))
                    .column().display(new PrintStream(byteArrayOutputStream9))
                    .valueAtEndPoint().display(new PrintStream(byteArrayOutputStream10));

    Assertions.assertThat(byteArrayOutputStream0.toString()).isEqualTo(String.format("[test table]%n"
                                                                                     + "|-----------|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |         |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "|           | PRIMARY | VAR1      | VAR2      | VAR3      | VAR4      | VAR5      | VAR6      | VAR7      | VAR8      | VAR9      | VAR10     | VAR11      | VAR12      | VAR13      | VAR14      | VAR15      | VAR16      | VAR17      | VAR18      | VAR19      | VAR20      | VAR21      | VAR22      | VAR23      | VAR24      | VAR25              | VAR26      | VAR27                         | VAR28                         | VAR29                         | VAR30      | VAR31      | VAR32      | VAR33      | VAR34      | VAR35                                     | VAR36      | VAR37      | VAR38      | VAR39      | VAR40      | VAR41      | VAR42      | VAR43      | VAR44      | VAR45      | VAR46      | VAR47      | VAR48      | VAR49      | VAR50      | VAR51      | VAR52      | VAR53      | VAR54      | VAR55      | VAR56      | VAR57      | VAR58      | VAR59                                | VAR60            | VAR61            |%n"
                                                                                     + "|           | KEY     | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (BOOLEAN) | (BOOLEAN) | (BOOLEAN) | (NUMBER)  | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (TIME)             | (DATE)     | (DATE_TIME)                   | (DATE_TIME)                   | (DATE_TIME)                   | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (NOT_IDENTIFIED : class java.util.Locale) | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (UUID)                               | (NOT_IDENTIFIED) | (NOT_IDENTIFIED) |%n"
                                                                                     + "|           |         | Index : 0 | Index : 1 | Index : 2 | Index : 3 | Index : 4 | Index : 5 | Index : 6 | Index : 7 | Index : 8 | Index : 9 | Index : 10 | Index : 11 | Index : 12 | Index : 13 | Index : 14 | Index : 15 | Index : 16 | Index : 17 | Index : 18 | Index : 19 | Index : 20 | Index : 21 | Index : 22 | Index : 23 | Index : 24         | Index : 25 | Index : 26                    | Index : 27                    | Index : 28                    | Index : 29 | Index : 30 | Index : 31 | Index : 32 | Index : 33 | Index : 34                                | Index : 35 | Index : 36 | Index : 37 | Index : 38 | Index : 39 | Index : 40 | Index : 41 | Index : 42 | Index : 43 | Index : 44 | Index : 45 | Index : 46 | Index : 47 | Index : 48 | Index : 49 | Index : 50 | Index : 51 | Index : 52 | Index : 53 | Index : 54 | Index : 55 | Index : 56 | Index : 57 | Index : 58                           | Index : 59       | Index : 60       |%n"
                                                                                     + "|-----------|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "| Index : 0 |         | 1         | 20        | 3         | 4         | 5         | 6         | true      | false     | true      | 7         | 8          | 9          | 10         | 11         | 12         | 13.13      | 14.14      | 15.15      | 16.16      | 17.17      | 18.18      | 19.19      | 20.2       | 21.21      | 09:01:00.000000000 | 2007-12-23 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | ...        | ...        | ...        | ...        | ...        | fr                                        | 22         | 23         | 24         | 25         | 26         | 27         | 28         | 29         | 30         | 31         | ...        | ...        | ...        | ...        | ...        | ...        | 32         | 33         | 34         | 35         | 36         | 37         | 38         | 30b443ae-c0c9-4790-9bec-ce1380808435 | null             | null             |%n"
                                                                                     + "|-----------|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"));
    Assertions.assertThat(byteArrayOutputStream1.toString()).isEqualTo(String.format("[Column at index 0 (column name : VAR1) of test table]%n"
                                                                                     + "|-----------|----------|%n"
                                                                                     + "|           | VAR1     |%n"
                                                                                     + "|           | (NUMBER) |%n"
                                                                                     + "|-----------|----------|%n"
                                                                                     + "| Index : 0 | 1        |%n"
                                                                                     + "|-----------|----------|%n"));
    Assertions.assertThat(byteArrayOutputStream2.toString()).isEqualTo(String.format("[Value at index 0 of Column at index 0 (column name : VAR1) of test table]%n"
                                                                                     + "|----------|%n"
                                                                                     + "| VAR1     |%n"
                                                                                     + "| (NUMBER) |%n"
                                                                                     + "|----------|%n"
                                                                                     + "| 1        |%n"
                                                                                     + "|----------|%n"));
    Assertions.assertThat(byteArrayOutputStream3.toString()).isEqualTo(String.format("[Row at index 0 of test table]%n"
                                                                                     + "|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|         |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "| PRIMARY | VAR1      | VAR2      | VAR3      | VAR4      | VAR5      | VAR6      | VAR7      | VAR8      | VAR9      | VAR10     | VAR11      | VAR12      | VAR13      | VAR14      | VAR15      | VAR16      | VAR17      | VAR18      | VAR19      | VAR20      | VAR21      | VAR22      | VAR23      | VAR24      | VAR25              | VAR26      | VAR27                         | VAR28                         | VAR29                         | VAR30      | VAR31      | VAR32      | VAR33      | VAR34      | VAR35                                     | VAR36      | VAR37      | VAR38      | VAR39      | VAR40      | VAR41      | VAR42      | VAR43      | VAR44      | VAR45      | VAR46      | VAR47      | VAR48      | VAR49      | VAR50      | VAR51      | VAR52      | VAR53      | VAR54      | VAR55      | VAR56      | VAR57      | VAR58      | VAR59                                | VAR60            | VAR61            |%n"
                                                                                     + "| KEY     | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (BOOLEAN) | (BOOLEAN) | (BOOLEAN) | (NUMBER)  | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (TIME)             | (DATE)     | (DATE_TIME)                   | (DATE_TIME)                   | (DATE_TIME)                   | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (NOT_IDENTIFIED : class java.util.Locale) | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (UUID)                               | (NOT_IDENTIFIED) | (NOT_IDENTIFIED) |%n"
                                                                                     + "|         | Index : 0 | Index : 1 | Index : 2 | Index : 3 | Index : 4 | Index : 5 | Index : 6 | Index : 7 | Index : 8 | Index : 9 | Index : 10 | Index : 11 | Index : 12 | Index : 13 | Index : 14 | Index : 15 | Index : 16 | Index : 17 | Index : 18 | Index : 19 | Index : 20 | Index : 21 | Index : 22 | Index : 23 | Index : 24         | Index : 25 | Index : 26                    | Index : 27                    | Index : 28                    | Index : 29 | Index : 30 | Index : 31 | Index : 32 | Index : 33 | Index : 34                                | Index : 35 | Index : 36 | Index : 37 | Index : 38 | Index : 39 | Index : 40 | Index : 41 | Index : 42 | Index : 43 | Index : 44 | Index : 45 | Index : 46 | Index : 47 | Index : 48 | Index : 49 | Index : 50 | Index : 51 | Index : 52 | Index : 53 | Index : 54 | Index : 55 | Index : 56 | Index : 57 | Index : 58                           | Index : 59       | Index : 60       |%n"
                                                                                     + "|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|         | 1         | 20        | 3         | 4         | 5         | 6         | true      | false     | true      | 7         | 8          | 9          | 10         | 11         | 12         | 13.13      | 14.14      | 15.15      | 16.16      | 17.17      | 18.18      | 19.19      | 20.2       | 21.21      | 09:01:00.000000000 | 2007-12-23 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | ...        | ...        | ...        | ...        | ...        | fr                                        | 22         | 23         | 24         | 25         | 26         | 27         | 28         | 29         | 30         | 31         | ...        | ...        | ...        | ...        | ...        | ...        | 32         | 33         | 34         | 35         | 36         | 37         | 38         | 30b443ae-c0c9-4790-9bec-ce1380808435 | null             | null             |%n"
                                                                                     + "|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"));
    Assertions.assertThat(byteArrayOutputStream4.toString()).isEqualTo(String.format("[Value at index 0 (column name : VAR1) of Row at index 0 of test table]%n"
                                                                                     + "|----------|%n"
                                                                                     + "| VAR1     |%n"
                                                                                     + "| (NUMBER) |%n"
                                                                                     + "|----------|%n"
                                                                                     + "| 1        |%n"
                                                                                     + "|----------|%n"));
    Assertions.assertThat(byteArrayOutputStream5.toString()).isEqualTo(String.format("[Changes on test table of 'sa/jdbc:h2:mem:testH2' source]%n"
                                                                                     + "|-----------|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |          |       |         |                |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "|           | TYPE     | TABLE | PRIMARY |                | VAR1      | VAR2      | VAR3      | VAR4      | VAR5      | VAR6      | VAR7      | VAR8      | VAR9      | VAR10     | VAR11      | VAR12      | VAR13      | VAR14      | VAR15      | VAR16      | VAR17      | VAR18      | VAR19      | VAR20      | VAR21      | VAR22      | VAR23      | VAR24      | VAR25              | VAR26      | VAR27                         | VAR28                         | VAR29                         | VAR30      | VAR31      | VAR32      | VAR33      | VAR34      | VAR35                                     | VAR36      | VAR37      | VAR38      | VAR39      | VAR40      | VAR41      | VAR42      | VAR43      | VAR44      | VAR45      | VAR46      | VAR47      | VAR48      | VAR49      | VAR50      | VAR51      | VAR52      | VAR53      | VAR54      | VAR55      | VAR56      | VAR57      | VAR58      | VAR59                                | VAR60            | VAR61            |%n"
                                                                                     + "|           |          |       | KEY     |                | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (BOOLEAN) | (BOOLEAN) | (BOOLEAN) | (NUMBER)  | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (TIME)             | (DATE)     | (DATE_TIME)                   | (DATE_TIME)                   | (DATE_TIME)                   | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (NOT_IDENTIFIED : class java.util.Locale) | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (UUID)                               | (NOT_IDENTIFIED) | (NOT_IDENTIFIED) |%n"
                                                                                     + "|           |          |       |         |                | Index : 0 | Index : 1 | Index : 2 | Index : 3 | Index : 4 | Index : 5 | Index : 6 | Index : 7 | Index : 8 | Index : 9 | Index : 10 | Index : 11 | Index : 12 | Index : 13 | Index : 14 | Index : 15 | Index : 16 | Index : 17 | Index : 18 | Index : 19 | Index : 20 | Index : 21 | Index : 22 | Index : 23 | Index : 24         | Index : 25 | Index : 26                    | Index : 27                    | Index : 28                    | Index : 29 | Index : 30 | Index : 31 | Index : 32 | Index : 33 | Index : 34                                | Index : 35 | Index : 36 | Index : 37 | Index : 38 | Index : 39 | Index : 40 | Index : 41 | Index : 42 | Index : 43 | Index : 44 | Index : 45 | Index : 46 | Index : 47 | Index : 48 | Index : 49 | Index : 50 | Index : 51 | Index : 52 | Index : 53 | Index : 54 | Index : 55 | Index : 56 | Index : 57 | Index : 58                           | Index : 59       | Index : 60       |%n"
                                                                                     + "|-----------|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |          |       |         | At start point |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "| Index : 0 | CREATION | test  |         |----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |          |       |         | At end point   | 1         | 20        | 3         | 4         | 5         | 6         | true      | false     | true      | 7         | 8          | 9          | 10         | 11         | 12         | 13.13      | 14.14      | 15.15      | 16.16      | 17.17      | 18.18      | 19.19      | 20.2       | 21.21      | 09:01:00.000000000 | 2007-12-23 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | ...        | ...        | ...        | ...        | ...        | fr                                        | 22         | 23         | 24         | 25         | 26         | 27         | 28         | 29         | 30         | 31         | ...        | ...        | ...        | ...        | ...        | ...        | 32         | 33         | 34         | 35         | 36         | 37         | 38         | 30b443ae-c0c9-4790-9bec-ce1380808435 | null             | null             |%n"
                                                                                     + "|-----------|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|-----------|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |          |       |         |                |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "|           | TYPE     | TABLE | PRIMARY |                | VAR1      | VAR2      | VAR3      | VAR4      | VAR5      | VAR6      | VAR7      | VAR8      | VAR9      | VAR10     | VAR11      | VAR12      | VAR13      | VAR14      | VAR15      | VAR16      | VAR17      | VAR18      | VAR19      | VAR20      | VAR21      | VAR22      | VAR23      | VAR24      | VAR25              | VAR26      | VAR27                         | VAR28                         | VAR29                         | VAR30      | VAR31      | VAR32      | VAR33      | VAR34      | VAR35                                     | VAR36      | VAR37      | VAR38      | VAR39      | VAR40      | VAR41      | VAR42      | VAR43      | VAR44      | VAR45      | VAR46      | VAR47      | VAR48      | VAR49      | VAR50      | VAR51      | VAR52      | VAR53      | VAR54      | VAR55      | VAR56      | VAR57      | VAR58      | VAR59                                | VAR60            | VAR61            |%n"
                                                                                     + "|           |          |       | KEY     |                | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (BOOLEAN) | (BOOLEAN) | (BOOLEAN) | (NUMBER)  | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (TIME)             | (DATE)     | (DATE_TIME)                   | (DATE_TIME)                   | (DATE_TIME)                   | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (NOT_IDENTIFIED : class java.util.Locale) | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (UUID)                               | (NOT_IDENTIFIED) | (NOT_IDENTIFIED) |%n"
                                                                                     + "|           |          |       |         |                | Index : 0 | Index : 1 | Index : 2 | Index : 3 | Index : 4 | Index : 5 | Index : 6 | Index : 7 | Index : 8 | Index : 9 | Index : 10 | Index : 11 | Index : 12 | Index : 13 | Index : 14 | Index : 15 | Index : 16 | Index : 17 | Index : 18 | Index : 19 | Index : 20 | Index : 21 | Index : 22 | Index : 23 | Index : 24         | Index : 25 | Index : 26                    | Index : 27                    | Index : 28                    | Index : 29 | Index : 30 | Index : 31 | Index : 32 | Index : 33 | Index : 34                                | Index : 35 | Index : 36 | Index : 37 | Index : 38 | Index : 39 | Index : 40 | Index : 41 | Index : 42 | Index : 43 | Index : 44 | Index : 45 | Index : 46 | Index : 47 | Index : 48 | Index : 49 | Index : 50 | Index : 51 | Index : 52 | Index : 53 | Index : 54 | Index : 55 | Index : 56 | Index : 57 | Index : 58                           | Index : 59       | Index : 60       |%n"
                                                                                     + "|-----------|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |          |       |         | At start point | 1         | 2         | 3         | 4         | 5         | 6         | true      | false     | true      | 7         | 8          | 9          | 10         | 11         | 12         | 13.13      | 14.14      | 15.15      | 16.16      | 17.17      | 18.18      | 19.19      | 20.2       | 21.21      | 09:01:00.000000000 | 2007-12-23 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | ...        | ...        | ...        | ...        | ...        | fr                                        | 22         | 23         | 24         | 25         | 26         | 27         | 28         | 29         | 30         | 31         | ...        | ...        | ...        | ...        | ...        | ...        | 32         | 33         | 34         | 35         | 36         | 37         | 38         | 30b443ae-c0c9-4790-9bec-ce1380808435 | null             | null             |%n"
                                                                                     + "| Index : 1 | DELETION | test  |         |----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|           |          |       |         | At end point   |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "|-----------|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"));
    Assertions.assertThat(byteArrayOutputStream6.toString()).isEqualTo(String.format("[Change at index 0 of Changes on test table of 'sa/jdbc:h2:mem:testH2' source]%n"
                                                                                     + "|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|          |       |         |                |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "| TYPE     | TABLE | PRIMARY |                | VAR1      | VAR2      | VAR3      | VAR4      | VAR5      | VAR6      | VAR7      | VAR8      | VAR9      | VAR10     | VAR11      | VAR12      | VAR13      | VAR14      | VAR15      | VAR16      | VAR17      | VAR18      | VAR19      | VAR20      | VAR21      | VAR22      | VAR23      | VAR24      | VAR25              | VAR26      | VAR27                         | VAR28                         | VAR29                         | VAR30      | VAR31      | VAR32      | VAR33      | VAR34      | VAR35                                     | VAR36      | VAR37      | VAR38      | VAR39      | VAR40      | VAR41      | VAR42      | VAR43      | VAR44      | VAR45      | VAR46      | VAR47      | VAR48      | VAR49      | VAR50      | VAR51      | VAR52      | VAR53      | VAR54      | VAR55      | VAR56      | VAR57      | VAR58      | VAR59                                | VAR60            | VAR61            |%n"
                                                                                     + "|          |       | KEY     |                | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (BOOLEAN) | (BOOLEAN) | (BOOLEAN) | (NUMBER)  | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (TIME)             | (DATE)     | (DATE_TIME)                   | (DATE_TIME)                   | (DATE_TIME)                   | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (NOT_IDENTIFIED : class java.util.Locale) | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (UUID)                               | (NOT_IDENTIFIED) | (NOT_IDENTIFIED) |%n"
                                                                                     + "|          |       |         |                | Index : 0 | Index : 1 | Index : 2 | Index : 3 | Index : 4 | Index : 5 | Index : 6 | Index : 7 | Index : 8 | Index : 9 | Index : 10 | Index : 11 | Index : 12 | Index : 13 | Index : 14 | Index : 15 | Index : 16 | Index : 17 | Index : 18 | Index : 19 | Index : 20 | Index : 21 | Index : 22 | Index : 23 | Index : 24         | Index : 25 | Index : 26                    | Index : 27                    | Index : 28                    | Index : 29 | Index : 30 | Index : 31 | Index : 32 | Index : 33 | Index : 34                                | Index : 35 | Index : 36 | Index : 37 | Index : 38 | Index : 39 | Index : 40 | Index : 41 | Index : 42 | Index : 43 | Index : 44 | Index : 45 | Index : 46 | Index : 47 | Index : 48 | Index : 49 | Index : 50 | Index : 51 | Index : 52 | Index : 53 | Index : 54 | Index : 55 | Index : 56 | Index : 57 | Index : 58                           | Index : 59       | Index : 60       |%n"
                                                                                     + "|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|          |       |         | At start point |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "| CREATION | test  |         |----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|          |       |         | At end point   | 1         | 20        | 3         | 4         | 5         | 6         | true      | false     | true      | 7         | 8          | 9          | 10         | 11         | 12         | 13.13      | 14.14      | 15.15      | 16.16      | 17.17      | 18.18      | 19.19      | 20.2       | 21.21      | 09:01:00.000000000 | 2007-12-23 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | ...        | ...        | ...        | ...        | ...        | fr                                        | 22         | 23         | 24         | 25         | 26         | 27         | 28         | 29         | 30         | 31         | ...        | ...        | ...        | ...        | ...        | ...        | 32         | 33         | 34         | 35         | 36         | 37         | 38         | 30b443ae-c0c9-4790-9bec-ce1380808435 | null             | null             |%n"
                                                                                     + "|----------|-------|---------|----------------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"));
    Assertions.assertThat(byteArrayOutputStream7.toString()).isEqualTo(String.format("[Row at end point of Change at index 0 of Changes on test table of 'sa/jdbc:h2:mem:testH2' source]%n"
                                                                                     + "|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|         |           |           |           |           |           |           |           |           |           |           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                    |            |                               |                               |                               |            |            |            |            |            |                                           |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |            |                                      |                  |                  |%n"
                                                                                     + "| PRIMARY | VAR1      | VAR2      | VAR3      | VAR4      | VAR5      | VAR6      | VAR7      | VAR8      | VAR9      | VAR10     | VAR11      | VAR12      | VAR13      | VAR14      | VAR15      | VAR16      | VAR17      | VAR18      | VAR19      | VAR20      | VAR21      | VAR22      | VAR23      | VAR24      | VAR25              | VAR26      | VAR27                         | VAR28                         | VAR29                         | VAR30      | VAR31      | VAR32      | VAR33      | VAR34      | VAR35                                     | VAR36      | VAR37      | VAR38      | VAR39      | VAR40      | VAR41      | VAR42      | VAR43      | VAR44      | VAR45      | VAR46      | VAR47      | VAR48      | VAR49      | VAR50      | VAR51      | VAR52      | VAR53      | VAR54      | VAR55      | VAR56      | VAR57      | VAR58      | VAR59                                | VAR60            | VAR61            |%n"
                                                                                     + "| KEY     | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (NUMBER)  | (BOOLEAN) | (BOOLEAN) | (BOOLEAN) | (NUMBER)  | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (NUMBER)   | (TIME)             | (DATE)     | (DATE_TIME)                   | (DATE_TIME)                   | (DATE_TIME)                   | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (NOT_IDENTIFIED : class java.util.Locale) | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (BYTES)    | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (TEXT)     | (UUID)                               | (NOT_IDENTIFIED) | (NOT_IDENTIFIED) |%n"
                                                                                     + "|         | Index : 0 | Index : 1 | Index : 2 | Index : 3 | Index : 4 | Index : 5 | Index : 6 | Index : 7 | Index : 8 | Index : 9 | Index : 10 | Index : 11 | Index : 12 | Index : 13 | Index : 14 | Index : 15 | Index : 16 | Index : 17 | Index : 18 | Index : 19 | Index : 20 | Index : 21 | Index : 22 | Index : 23 | Index : 24         | Index : 25 | Index : 26                    | Index : 27                    | Index : 28                    | Index : 29 | Index : 30 | Index : 31 | Index : 32 | Index : 33 | Index : 34                                | Index : 35 | Index : 36 | Index : 37 | Index : 38 | Index : 39 | Index : 40 | Index : 41 | Index : 42 | Index : 43 | Index : 44 | Index : 45 | Index : 46 | Index : 47 | Index : 48 | Index : 49 | Index : 50 | Index : 51 | Index : 52 | Index : 53 | Index : 54 | Index : 55 | Index : 56 | Index : 57 | Index : 58                           | Index : 59       | Index : 60       |%n"
                                                                                     + "|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"
                                                                                     + "|         | 1         | 20        | 3         | 4         | 5         | 6         | true      | false     | true      | 7         | 8          | 9          | 10         | 11         | 12         | 13.13      | 14.14      | 15.15      | 16.16      | 17.17      | 18.18      | 19.19      | 20.2       | 21.21      | 09:01:00.000000000 | 2007-12-23 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | 2007-12-23T09:01:00.000000000 | ...        | ...        | ...        | ...        | ...        | fr                                        | 22         | 23         | 24         | 25         | 26         | 27         | 28         | 29         | 30         | 31         | ...        | ...        | ...        | ...        | ...        | ...        | 32         | 33         | 34         | 35         | 36         | 37         | 38         | 30b443ae-c0c9-4790-9bec-ce1380808435 | null             | null             |%n"
                                                                                     + "|---------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------|------------|-------------------------------|-------------------------------|-------------------------------|------------|------------|------------|------------|------------|-------------------------------------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|--------------------------------------|------------------|------------------|%n"));
    Assertions.assertThat(byteArrayOutputStream8.toString()).isEqualTo(String.format("[Value at index 0 (column name : VAR1) of Row at end point of Change at index 0 of Changes on test table of 'sa/jdbc:h2:mem:testH2' source]%n"
                                                                                     + "|----------|%n"
                                                                                     + "| VAR1     |%n"
                                                                                     + "| (NUMBER) |%n"
                                                                                     + "|----------|%n"
                                                                                     + "| 1        |%n"
                                                                                     + "|----------|%n"));
    Assertions.assertThat(byteArrayOutputStream9.toString()).isEqualTo(String.format("[Column at index 0 (column name : VAR1) of Change at index 0 of Changes on test table of 'sa/jdbc:h2:mem:testH2' source]%n"
                                                                                     + "|----------------|----------|%n"
                                                                                     + "|                | VAR1     |%n"
                                                                                     + "|                | (NUMBER) |%n"
                                                                                     + "|----------------|----------|%n"
                                                                                     + "| At start point | null     |%n"
                                                                                     + "|----------------|----------|%n"
                                                                                     + "| At end point   | 1        |%n"
                                                                                     + "|----------------|----------|%n"));
    Assertions.assertThat(byteArrayOutputStream10.toString()).isEqualTo(String.format("[Value at end point of Column at index 0 (column name : VAR1) of Change at index 0 of Changes on test table of 'sa/jdbc:h2:mem:testH2' source]%n"
                                                                                      + "|----------|%n"
                                                                                      + "| VAR1     |%n"
                                                                                      + "| (NUMBER) |%n"
                                                                                      + "|----------|%n"
                                                                                      + "| 1        |%n"
                                                                                      + "|----------|%n"));
  }

  @Test
  @NeedReload
  public void test_PrimaryKey_hasPksNames() {
    Table table = new Table(source, "test");
    Changes changes = new Changes(table).setStartPointNow();
    update();
    changes.setEndPointNow();

    try {
      assertThat(changes).change().hasPksNames("var1");
    }
    catch (AssertionError e) {
      Assertions.assertThat(e.getMessage()).isEqualTo(String.format("[Change at index 0 of Changes on test table of 'sa/jdbc:h2:mem:testH2' source] %n"
                                                                    + "Expecting :%n"
                                                                    + "  [\"var1\"]%n"
                                                                    + "to be the name of the columns of the primary keys but was:%n"
                                                                    + "  []"));
    }
  }

  @Test
  @NeedReload
  public void test_ColumnName_hasColumnName() {
    Table table = new Table(source, "test");
    Changes changes = new Changes(table).setStartPointNow();
    update();
    changes.setEndPointNow();

    assertThat(table)
            .column().hasColumnName("VAR1")
            .column().hasColumnName("VAR2")
            .column().hasColumnName("VAR3")
            .column().hasColumnName("VAR4")
            .column().hasColumnName("VAR5")
            .column().hasColumnName("VAR6")
            .column().hasColumnName("VAR7")
            .column().hasColumnName("VAR8")
            .column().hasColumnName("VAR9")
            .column().hasColumnName("VAR10")
            .column().hasColumnName("VAR11")
            .column().hasColumnName("VAR12")
            .column().hasColumnName("VAR13")
            .column().hasColumnName("VAR14")
            .column().hasColumnName("VAR15")
            .column().hasColumnName("VAR16")
            .column().hasColumnName("VAR17")
            .column().hasColumnName("VAR18")
            .column().hasColumnName("VAR19")
            .column().hasColumnName("VAR20")
            .column().hasColumnName("VAR21")
            .column().hasColumnName("VAR22")
            .column().hasColumnName("VAR23")
            .column().hasColumnName("VAR24")
            .column().hasColumnName("VAR25")
            .column().hasColumnName("VAR26")
            .column().hasColumnName("VAR27")
            .column().hasColumnName("VAR28")
            .column().hasColumnName("VAR29")
            .column().hasColumnName("VAR30")
            .column().hasColumnName("VAR31")
            .column().hasColumnName("VAR32")
            .column().hasColumnName("VAR33")
            .column().hasColumnName("VAR34")
            .column().hasColumnName("VAR35")
            .column().hasColumnName("VAR36")
            .column().hasColumnName("VAR37")
            .column().hasColumnName("VAR38")
            .column().hasColumnName("VAR39")
            .column().hasColumnName("VAR40")
            .column().hasColumnName("VAR41")
            .column().hasColumnName("VAR42")
            .column().hasColumnName("VAR43")
            .column().hasColumnName("VAR44")
            .column().hasColumnName("VAR45")
            .column().hasColumnName("VAR46")
            .column().hasColumnName("VAR47")
            .column().hasColumnName("VAR48")
            .column().hasColumnName("VAR49")
            .column().hasColumnName("VAR50")
            .column().hasColumnName("VAR51")
            .column().hasColumnName("VAR52")
            .column().hasColumnName("VAR53")
            .column().hasColumnName("VAR54")
            .column().hasColumnName("VAR55")
            .column().hasColumnName("VAR56")
            .column().hasColumnName("VAR57")
            .column().hasColumnName("VAR58")
            .column().hasColumnName("VAR59")
            .column().hasColumnName("VAR60")
            .column().hasColumnName("VAR61")
    ;

    assertThat(changes).change()
                       .column().hasColumnName("VAR1")
                       .column().hasColumnName("VAR2")
                       .column().hasColumnName("VAR3")
                       .column().hasColumnName("VAR4")
                       .column().hasColumnName("VAR5")
                       .column().hasColumnName("VAR6")
                       .column().hasColumnName("VAR7")
                       .column().hasColumnName("VAR8")
                       .column().hasColumnName("VAR9")
                       .column().hasColumnName("VAR10")
                       .column().hasColumnName("VAR11")
                       .column().hasColumnName("VAR12")
                       .column().hasColumnName("VAR13")
                       .column().hasColumnName("VAR14")
                       .column().hasColumnName("VAR15")
                       .column().hasColumnName("VAR16")
                       .column().hasColumnName("VAR17")
                       .column().hasColumnName("VAR18")
                       .column().hasColumnName("VAR19")
                       .column().hasColumnName("VAR20")
                       .column().hasColumnName("VAR21")
                       .column().hasColumnName("VAR22")
                       .column().hasColumnName("VAR23")
                       .column().hasColumnName("VAR24")
                       .column().hasColumnName("VAR25")
                       .column().hasColumnName("VAR26")
                       .column().hasColumnName("VAR27")
                       .column().hasColumnName("VAR28")
                       .column().hasColumnName("VAR29")
                       .column().hasColumnName("VAR30")
                       .column().hasColumnName("VAR31")
                       .column().hasColumnName("VAR32")
                       .column().hasColumnName("VAR33")
                       .column().hasColumnName("VAR34")
                       .column().hasColumnName("VAR35")
                       .column().hasColumnName("VAR36")
                       .column().hasColumnName("VAR37")
                       .column().hasColumnName("VAR38")
                       .column().hasColumnName("VAR39")
                       .column().hasColumnName("VAR40")
                       .column().hasColumnName("VAR41")
                       .column().hasColumnName("VAR42")
                       .column().hasColumnName("VAR43")
                       .column().hasColumnName("VAR44")
                       .column().hasColumnName("VAR45")
                       .column().hasColumnName("VAR46")
                       .column().hasColumnName("VAR47")
                       .column().hasColumnName("VAR48")
                       .column().hasColumnName("VAR49")
                       .column().hasColumnName("VAR50")
                       .column().hasColumnName("VAR51")
                       .column().hasColumnName("VAR52")
                       .column().hasColumnName("VAR53")
                       .column().hasColumnName("VAR54")
                       .column().hasColumnName("VAR55")
                       .column().hasColumnName("VAR56")
                       .column().hasColumnName("VAR57")
                       .column().hasColumnName("VAR58")
                       .column().hasColumnName("VAR59")
                       .column().hasColumnName("VAR60")
                       .column().hasColumnName("VAR61")
    ;
  }

  @Test
  @NeedReload
  public void test_ColumnClass_isOfClass() {
    Table table = new Table(source, "test");
    Changes changes = new Changes(table).setStartPointNow();
    update();
    changes.setEndPointNow();

    assertThat(table)
            .column("VAR1").isOfClass(Long.class, false)
            .column("VAR2").isOfClass(Integer.class, false)
            .column("VAR3").isOfClass(Integer.class, false)
            .column("VAR4").isOfClass(Integer.class, false)
            .column("VAR5").isOfClass(Integer.class, false)
            .column("VAR6").isOfClass(Integer.class, false)
            .column("VAR7").isOfClass(Boolean.class, false)
            .column("VAR8").isOfClass(Boolean.class, false)
            .column("VAR9").isOfClass(Boolean.class, false)
            .column("VAR10").isOfClass(Byte.class, false)
            .column("VAR11").isOfClass(Short.class, false)
            .column("VAR12").isOfClass(Short.class, false)
            .column("VAR13").isOfClass(Short.class, false)
            .column("VAR14").isOfClass(Long.class, false)
            .column("VAR15").isOfClass(Long.class, false)
            .column("VAR16").isOfClass(BigDecimal.class, false)
            .column("VAR17").isOfClass(BigDecimal.class, false)
            .column("VAR18").isOfClass(BigDecimal.class, false)
            .column("VAR19").isOfClass(BigDecimal.class, false)
            .column("VAR20").isOfClass(Double.class, false)
            .column("VAR21").isOfClass(Double.class, false)
            .column("VAR22").isOfClass(Double.class, false)
            .column("VAR23").isOfClass(Float.class, false)
            .column("VAR24").isOfClass(Float.class, false)
            .column("VAR25").isOfClass(Time.class, false)
            .column("VAR26").isOfClass(Date.class, false)
            .column("VAR27").isOfClass(Timestamp.class, false)
            .column("VAR28").isOfClass(Timestamp.class, false)
            .column("VAR29").isOfClass(Timestamp.class, false)
            .column("VAR30").isOfClass(byte[].class, false)
            .column("VAR31").isOfClass(byte[].class, false)
            .column("VAR32").isOfClass(byte[].class, false)
            .column("VAR33").isOfClass(byte[].class, false)
            .column("VAR34").isOfClass(byte[].class, false)
            .column("VAR35").isOfClass(Locale.class, false)
            .column("VAR36").isOfClass(String.class, false)
            .column("VAR37").isOfClass(String.class, false)
            .column("VAR38").isOfClass(String.class, false)
            .column("VAR39").isOfClass(String.class, false)
            .column("VAR40").isOfClass(String.class, false)
            .column("VAR41").isOfClass(String.class, false)
            .column("VAR42").isOfClass(String.class, false)
            .column("VAR43").isOfClass(String.class, false)
            .column("VAR44").isOfClass(String.class, false)
            .column("VAR45").isOfClass(String.class, false)
            .column("VAR46").isOfClass(byte[].class, false)
            .column("VAR47").isOfClass(byte[].class, false)
            .column("VAR48").isOfClass(byte[].class, false)
            .column("VAR49").isOfClass(byte[].class, false)
            .column("VAR50").isOfClass(byte[].class, false)
            .column("VAR51").isOfClass(byte[].class, false)
            .column("VAR52").isOfClass(String.class, false)
            .column("VAR53").isOfClass(String.class, false)
            .column("VAR54").isOfClass(String.class, false)
            .column("VAR55").isOfClass(String.class, false)
            .column("VAR56").isOfClass(String.class, false)
            .column("VAR57").isOfClass(String.class, false)
            .column("VAR58").isOfClass(String.class, false)
            .column("VAR59").isOfClass(UUID.class, false)
            .column("VAR60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
            .column("VAR61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
    ;

    assertThat(changes).change()
                       .column("VAR1").isOfClass(Long.class, true)
                       .column("VAR2").isOfClass(Integer.class, true)
                       .column("VAR3").isOfClass(Integer.class, true)
                       .column("VAR4").isOfClass(Integer.class, true)
                       .column("VAR5").isOfClass(Integer.class, true)
                       .column("VAR6").isOfClass(Integer.class, true)
                       .column("VAR7").isOfClass(Boolean.class, true)
                       .column("VAR8").isOfClass(Boolean.class, true)
                       .column("VAR9").isOfClass(Boolean.class, true)
                       .column("VAR10").isOfClass(Byte.class, true)
                       .column("VAR11").isOfClass(Short.class, true)
                       .column("VAR12").isOfClass(Short.class, true)
                       .column("VAR13").isOfClass(Short.class, true)
                       .column("VAR14").isOfClass(Long.class, true)
                       .column("VAR15").isOfClass(Long.class, true)
                       .column("VAR16").isOfClass(BigDecimal.class, true)
                       .column("VAR17").isOfClass(BigDecimal.class, true)
                       .column("VAR18").isOfClass(BigDecimal.class, true)
                       .column("VAR19").isOfClass(BigDecimal.class, true)
                       .column("VAR20").isOfClass(Double.class, true)
                       .column("VAR21").isOfClass(Double.class, true)
                       .column("VAR22").isOfClass(Double.class, true)
                       .column("VAR23").isOfClass(Float.class, true)
                       .column("VAR24").isOfClass(Float.class, true)
                       .column("VAR25").isOfClass(Time.class, true)
                       .column("VAR26").isOfClass(Date.class, true)
                       .column("VAR27").isOfClass(Timestamp.class, true)
                       .column("VAR28").isOfClass(Timestamp.class, true)
                       .column("VAR29").isOfClass(Timestamp.class, true)
                       .column("VAR30").isOfClass(byte[].class, true)
                       .column("VAR31").isOfClass(byte[].class, true)
                       .column("VAR32").isOfClass(byte[].class, true)
                       .column("VAR33").isOfClass(byte[].class, true)
                       .column("VAR34").isOfClass(byte[].class, true)
                       .column("VAR35").isOfClass(Locale.class, true)
                       .column("VAR36").isOfClass(String.class, true)
                       .column("VAR37").isOfClass(String.class, true)
                       .column("VAR38").isOfClass(String.class, true)
                       .column("VAR39").isOfClass(String.class, true)
                       .column("VAR40").isOfClass(String.class, true)
                       .column("VAR41").isOfClass(String.class, true)
                       .column("VAR42").isOfClass(String.class, true)
                       .column("VAR43").isOfClass(String.class, true)
                       .column("VAR44").isOfClass(String.class, true)
                       .column("VAR45").isOfClass(String.class, true)
                       .column("VAR46").isOfClass(byte[].class, true)
                       .column("VAR47").isOfClass(byte[].class, true)
                       .column("VAR48").isOfClass(byte[].class, true)
                       .column("VAR49").isOfClass(byte[].class, true)
                       .column("VAR50").isOfClass(byte[].class, true)
                       .column("VAR51").isOfClass(byte[].class, true)
                       .column("VAR52").isOfClass(String.class, true)
                       .column("VAR53").isOfClass(String.class, true)
                       .column("VAR54").isOfClass(String.class, true)
                       .column("VAR55").isOfClass(String.class, true)
                       .column("VAR56").isOfClass(String.class, true)
                       .column("VAR57").isOfClass(String.class, true)
                       .column("VAR58").isOfClass(String.class, true)
                       .column("VAR59").isOfClass(UUID.class, true)
            .column("VAR60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
            .column("VAR61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
    ;
  }
//
//  @Test
//  @NeedReload
//  public void test_ColumnEquality_hasValues() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).column("var1").hasValues(1)
//                     .column("var2").hasValues(20)
//                     .column("var3").hasValues(3)
//                     .column("var4").hasValues(4)
//                     .column("var5").hasValues(5)
//                     .column("var6").hasValues(6)
//                     .column("var7").hasValues(true)
//                     .column("var8").hasValues(false)
//                     .column("var9").hasValues(true)
//                     .column("var10").hasValues(7)
//                     .column("var11").hasValues(8)
//                     .column("var12").hasValues(9)
//                     .column("var13").hasValues(10)
//                     .column("var14").hasValues(11)
//                     .column("var15").hasValues(12)
//                     .column("var16").hasValues(13.13)
//                     .column("var17").hasValues(14.14)
//                     .column("var18").hasValues(15.15)
//                     .column("var19").hasValues(16.16)
//                     .column("var20").hasValues(17.17)
//                     .column("var21").hasValues(18.18)
//                     .column("var22").hasValues(19.19)
//                     .column("var23").hasValues(20.20)
//                     .column("var24").hasValues(21.21)
//                     .column("var25").hasValues(TimeValue.of(9, 1))
//                     .column("var26").hasValues(DateValue.of(2007, 12, 23))
//                     .column("var27").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .column("var28").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .column("var29").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .column("var30").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var31").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var32").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var33").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var34").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var35").hasValues(Locale.FRENCH)
//                     .column("var36").hasValues("22")
//                     .column("var37").hasValues("23")
//                     .column("var38").hasValues("24")
//                     .column("var39").hasValues("25")
//                     .column("var40").hasValues("26")
//                     .column("var41").hasValues("27")
//                     .column("var42").hasValues("28")
//                     .column("var43").hasValues("29")
//                     .column("var44").hasValues("30")
//                     .column("var45").hasValues("31")
//                     .column("var46").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var47").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var48").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var49").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var50").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var51").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var52").hasValues("32")
//                     .column("var53").hasValues("33")
//                     .column("var54").hasValues("34")
//                     .column("var55").hasValues("35")
//                     .column("var56").hasValues("36")
//                     .column("var57").hasValues("37")
//                     .column("var58").hasValues("38")
//                     .column("var59").hasValues(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change()
//                       .column("var1").hasValues(1)
//                       .column("var2").hasValues(2, 20)
//                       .column("var3").hasValues(3)
//                       .column("var4").hasValues(4)
//                       .column("var5").hasValues(5)
//                       .column("var6").hasValues(6)
//                       .column("var7").hasValues(true)
//                       .column("var8").hasValues(false)
//                       .column("var9").hasValues(true)
//                       .column("var10").hasValues(7)
//                       .column("var11").hasValues(8)
//                       .column("var12").hasValues(9)
//                       .column("var13").hasValues(10)
//                       .column("var14").hasValues(11)
//                       .column("var15").hasValues(12)
//                       .column("var16").hasValues(13.13)
//                       .column("var17").hasValues(14.14)
//                       .column("var18").hasValues(15.15)
//                       .column("var19").hasValues(16.16)
//                       .column("var20").hasValues(17.17)
//                       .column("var21").hasValues(18.18)
//                       .column("var22").hasValues(19.19)
//                       .column("var23").hasValues(20.20)
//                       .column("var24").hasValues(21.21)
//                       .column("var25").hasValues(TimeValue.of(9, 1))
//                       .column("var26").hasValues(DateValue.of(2007, 12, 23))
//                       .column("var27").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var28").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var29").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var30").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var31").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var32").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var33").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var34").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var35").hasValues(Locale.FRENCH)
//                       .column("var36").hasValues("22")
//                       .column("var37").hasValues("23")
//                       .column("var38").hasValues("24")
//                       .column("var39").hasValues("25")
//                       .column("var40").hasValues("26")
//                       .column("var41").hasValues("27")
//                       .column("var42").hasValues("28")
//                       .column("var43").hasValues("29")
//                       .column("var44").hasValues("30")
//                       .column("var45").hasValues("31")
//                       .column("var46").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var47").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var48").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var49").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var50").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var51").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var52").hasValues("32")
//                       .column("var53").hasValues("33")
//                       .column("var54").hasValues("34")
//                       .column("var55").hasValues("35")
//                       .column("var56").hasValues("36")
//                       .column("var57").hasValues("37")
//                       .column("var58").hasValues("38")
//                       .column("var59").hasValues(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ColumnEquality_containsValues() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).column("var1").containsValues(1)
//                     .column("var2").containsValues(20)
//                     .column("var3").containsValues(3)
//                     .column("var4").containsValues(4)
//                     .column("var5").containsValues(5)
//                     .column("var6").containsValues(6)
//                     .column("var7").containsValues(true)
//                     .column("var8").containsValues(false)
//                     .column("var9").containsValues(true)
//                     .column("var10").containsValues(7)
//                     .column("var11").containsValues(8)
//                     .column("var12").containsValues(9)
//                     .column("var13").containsValues(10)
//                     .column("var14").containsValues(11)
//                     .column("var15").containsValues(12)
//                     .column("var16").containsValues(13.13)
//                     .column("var17").containsValues(14.14)
//                     .column("var18").containsValues(15.15)
//                     .column("var19").containsValues(16.16)
//                     .column("var20").containsValues(17.17)
//                     .column("var21").containsValues(18.18)
//                     .column("var22").containsValues(19.19)
//                     .column("var23").containsValues(20.20)
//                     .column("var24").containsValues(21.21)
//                     .column("var25").containsValues(TimeValue.of(9, 1))
//                     .column("var26").containsValues(DateValue.of(2007, 12, 23))
//                     .column("var27").containsValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .column("var28").containsValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .column("var29").containsValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .column("var30").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var31").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var32").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var33").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var34").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var35").containsValues(Locale.FRENCH)
//                     .column("var36").containsValues("22")
//                     .column("var37").containsValues("23")
//                     .column("var38").containsValues("24")
//                     .column("var39").containsValues("25")
//                     .column("var40").containsValues("26")
//                     .column("var41").containsValues("27")
//                     .column("var42").containsValues("28")
//                     .column("var43").containsValues("29")
//                     .column("var44").containsValues("30")
//                     .column("var45").containsValues("31")
//                     .column("var46").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var47").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var48").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var49").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var50").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var51").containsValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .column("var52").containsValues("32")
//                     .column("var53").containsValues("33")
//                     .column("var54").containsValues("34")
//                     .column("var55").containsValues("35")
//                     .column("var56").containsValues("36")
//                     .column("var57").containsValues("37")
//                     .column("var58").containsValues("38")
//                     .column("var59").containsValues(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ColumnType_isOfType() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).column("var1").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var2").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var3").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var4").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var5").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var6").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var7").isBoolean(false).isOfType(ValueType.BOOLEAN, false)
//                     .column("var8").isBoolean(false).isOfType(ValueType.BOOLEAN, false)
//                     .column("var9").isBoolean(false).isOfType(ValueType.BOOLEAN, false)
//                     .column("var10").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var11").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var12").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var13").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var14").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var15").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var16").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var17").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var18").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var19").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var20").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var21").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var22").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var23").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var24").isNumber(false).isOfType(ValueType.NUMBER, false)
//                     .column("var25").isTime(false).isOfType(ValueType.TIME, false)
//                     .column("var26").isDate(false).isOfType(ValueType.DATE, false)
//                     .column("var27").isDateTime(false).isOfType(ValueType.DATE_TIME, false)
//                     .column("var28").isDateTime(false).isOfType(ValueType.DATE_TIME, false)
//                     .column("var29").isDateTime(false).isOfType(ValueType.DATE_TIME, false)
//                     .column("var30").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var31").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var32").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var33").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var34").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var35")
//                     .column("var36").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var37").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var38").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var39").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var40").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var41").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var42").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var43").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var44").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var45").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var46").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var47").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var48").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var49").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var50").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var51").isBytes(false).isOfType(ValueType.BYTES, false)
//                     .column("var52").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var53").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var54").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var55").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var56").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var57").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var58").isText(false).isOfType(ValueType.TEXT, false)
//                     .column("var59").isUUID(false).isOfType(ValueType.UUID, false)
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change()
//                       .column("var1").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var2").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var3").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var4").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var5").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var6").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var7").isBoolean(false).isOfType(ValueType.BOOLEAN, false)
//                       .column("var8").isBoolean(false).isOfType(ValueType.BOOLEAN, false)
//                       .column("var9").isBoolean(false).isOfType(ValueType.BOOLEAN, false)
//                       .column("var10").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var11").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var12").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var13").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var14").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var15").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var16").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var17").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var18").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var19").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var20").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var21").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var22").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var23").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var24").isNumber(false).isOfType(ValueType.NUMBER, false)
//                       .column("var25").isTime(false).isOfType(ValueType.TIME, false)
//                       .column("var26").isDate(false).isOfType(ValueType.DATE, false)
//                       .column("var27").isDateTime(false).isOfType(ValueType.DATE_TIME, false)
//                       .column("var28").isDateTime(false).isOfType(ValueType.DATE_TIME, false)
//                       .column("var29").isDateTime(false).isOfType(ValueType.DATE_TIME, false)
//                       .column("var30").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var31").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var32").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var33").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var34").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var35")
//                       .column("var36").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var37").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var38").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var39").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var40").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var41").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var42").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var43").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var44").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var45").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var46").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var47").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var48").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var49").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var50").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var51").isBytes(false).isOfType(ValueType.BYTES, false)
//                       .column("var52").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var53").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var54").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var55").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var56").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var57").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var58").isText(false).isOfType(ValueType.TEXT, false)
//                       .column("var59").isUUID(false).isOfType(ValueType.UUID, false)
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ColumnOfChangeEquality_hasValues() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(changes).change()
//                       .column("var1").hasValues(1)
//                       .column("var2").hasValues(2, 20)
//                       .column("var3").hasValues(3)
//                       .column("var4").hasValues(4)
//                       .column("var5").hasValues(5)
//                       .column("var6").hasValues(6)
//                       .column("var7").hasValues(true)
//                       .column("var8").hasValues(false)
//                       .column("var9").hasValues(true)
//                       .column("var10").hasValues(7)
//                       .column("var11").hasValues(8)
//                       .column("var12").hasValues(9)
//                       .column("var13").hasValues(10)
//                       .column("var14").hasValues(11)
//                       .column("var15").hasValues(12)
//                       .column("var16").hasValues(13.13)
//                       .column("var17").hasValues(14.14)
//                       .column("var18").hasValues(15.15)
//                       .column("var19").hasValues(16.16)
//                       .column("var20").hasValues(17.17)
//                       .column("var21").hasValues(18.18)
//                       .column("var22").hasValues(19.19)
//                       .column("var23").hasValues(20.20)
//                       .column("var24").hasValues(21.21)
//                       .column("var25").hasValues(TimeValue.of(9, 1))
//                       .column("var26").hasValues(DateValue.of(2007, 12, 23))
//                       .column("var27").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var28").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var29").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var30").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var31").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var32").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var33").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var34").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var35").hasValues(Locale.FRENCH)
//                       .column("var36").hasValues("22")
//                       .column("var37").hasValues("23")
//                       .column("var38").hasValues("24")
//                       .column("var39").hasValues("25")
//                       .column("var40").hasValues("26")
//                       .column("var41").hasValues("27")
//                       .column("var42").hasValues("28")
//                       .column("var43").hasValues("29")
//                       .column("var44").hasValues("30")
//                       .column("var45").hasValues("31")
//                       .column("var46").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var47").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var48").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var49").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var50").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var51").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var52").hasValues("32")
//                       .column("var53").hasValues("33")
//                       .column("var54").hasValues("34")
//                       .column("var55").hasValues("35")
//                       .column("var56").hasValues("36")
//                       .column("var57").hasValues("37")
//                       .column("var58").hasValues("38")
//                       .column("var59").hasValues(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change()
//                       .column("var1").hasValues(1, 1)
//                       .column("var2").hasValues(2, 20)
//                       .column("var3").hasValues(3, 3)
//                       .column("var4").hasValues(4, 4)
//                       .column("var5").hasValues(5, 5)
//                       .column("var6").hasValues(6, 6)
//                       .column("var7").hasValues(true, true)
//                       .column("var8").hasValues(false, false)
//                       .column("var9").hasValues(true, true)
//                       .column("var10").hasValues(7, 7)
//                       .column("var11").hasValues(8, 8)
//                       .column("var12").hasValues(9, 9)
//                       .column("var13").hasValues(10, 10)
//                       .column("var14").hasValues(11, 11)
//                       .column("var15").hasValues(12, 12)
//                       .column("var16").hasValues(13.13, 13.13)
//                       .column("var17").hasValues(14.14, 14.14)
//                       .column("var18").hasValues(15.15, 15.15)
//                       .column("var19").hasValues(16.16, 16.16)
//                       .column("var20").hasValues(17.17, 17.17)
//                       .column("var21").hasValues(18.18, 18.18)
//                       .column("var22").hasValues(19.19, 19.19)
//                       .column("var23").hasValues(20.20, 20.20)
//                       .column("var24").hasValues(21.21, 21.21)
//                       .column("var25").hasValues(TimeValue.of(9, 1), TimeValue.of(9, 1))
//                       .column("var26").hasValues(DateValue.of(2007, 12, 23), DateValue.of(2007, 12, 23))
//                       .column("var27").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                                  DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var28").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                                  DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var29").hasValues(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                                  DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .column("var30").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var31").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var32").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var33").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var34").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var35").hasValues(Locale.FRENCH, Locale.FRENCH)
//                       .column("var36").hasValues("22", "22")
//                       .column("var37").hasValues("23", "23")
//                       .column("var38").hasValues("24", "24")
//                       .column("var39").hasValues("25", "25")
//                       .column("var40").hasValues("26", "26")
//                       .column("var41").hasValues("27", "27")
//                       .column("var42").hasValues("28", "28")
//                       .column("var43").hasValues("29", "29")
//                       .column("var44").hasValues("30", "30")
//                       .column("var45").hasValues("31", "31")
//                       .column("var46").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var47").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var48").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var49").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var50").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var51").hasValues(bytesContentFromClassPathOf("h2-logo-2.png"),
//                                                  bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .column("var52").hasValues("32", "32")
//                       .column("var53").hasValues("33", "33")
//                       .column("var54").hasValues("34", "34")
//                       .column("var55").hasValues("35", "35")
//                       .column("var56").hasValues("36", "36")
//                       .column("var57").hasValues("37", "37")
//                       .column("var58").hasValues("38", "38")
//                       .column("var59").hasValues(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"),
//                                                  UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .column("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .column("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_RowEquality_hasValues() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).row()
//                     .hasValues(1,
//                                20,
//                                3,
//                                4,
//                                5,
//                                6,
//                                true,
//                                false,
//                                true,
//                                7,
//                                8,
//                                9,
//                                10,
//                                11,
//                                12,
//                                13.13,
//                                14.14,
//                                15.15,
//                                16.16,
//                                17.17,
//                                18.18,
//                                19.19,
//                                20.20,
//                                21.21,
//                                TimeValue.of(9, 1),
//                                DateValue.of(2007, 12, 23),
//                                DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                Locale.FRENCH,
//                                "22",
//                                "23",
//                                "24",
//                                "25",
//                                "26",
//                                "27",
//                                "28",
//                                "29",
//                                "30",
//                                "31",
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                bytesContentFromClassPathOf("h2-logo-2.png"),
//                                "32",
//                                "33",
//                                "34",
//                                "35",
//                                "36",
//                                "37",
//                                "38",
//                                UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"),
//                                null,
//                                null)
//    ;
//
//    assertThat(changes).change().rowAtStartPoint()
//                       .hasValues(1,
//                                  2,
//                                  3,
//                                  4,
//                                  5,
//                                  6,
//                                  true,
//                                  false,
//                                  true,
//                                  7,
//                                  8,
//                                  9,
//                                  10,
//                                  11,
//                                  12,
//                                  13.13,
//                                  14.14,
//                                  15.15,
//                                  16.16,
//                                  17.17,
//                                  18.18,
//                                  19.19,
//                                  20.20,
//                                  21.21,
//                                  TimeValue.of(9, 1),
//                                  DateValue.of(2007, 12, 23),
//                                  DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                  DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                  DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  Locale.FRENCH,
//                                  "22",
//                                  "23",
//                                  "24",
//                                  "25",
//                                  "26",
//                                  "27",
//                                  "28",
//                                  "29",
//                                  "30",
//                                  "31",
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  bytesContentFromClassPathOf("h2-logo-2.png"),
//                                  "32",
//                                  "33",
//                                  "34",
//                                  "35",
//                                  "36",
//                                  "37",
//                                  "38",
//                                  UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"),
//                                  null,
//                                  null)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ValueClass_isOfClass() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).row()
//                     .value("var1").isOfClass(Long.class)
//                     .value("var2").isOfClass(Integer.class)
//                     .value("var3").isOfClass(Integer.class)
//                     .value("var4").isOfClass(Integer.class)
//                     .value("var5").isOfClass(Integer.class)
//                     .value("var6").isOfClass(Integer.class)
//                     .value("var7").isOfClass(Boolean.class)
//                     .value("var8").isOfClass(Boolean.class)
//                     .value("var9").isOfClass(Boolean.class)
//                     .value("var10").isOfClass(Byte.class)
//                     .value("var11").isOfClass(Short.class)
//                     .value("var12").isOfClass(Short.class)
//                     .value("var13").isOfClass(Short.class)
//                     .value("var14").isOfClass(Long.class)
//                     .value("var15").isOfClass(Long.class)
//                     .value("var16").isOfClass(BigDecimal.class)
//                     .value("var17").isOfClass(BigDecimal.class)
//                     .value("var18").isOfClass(BigDecimal.class)
//                     .value("var19").isOfClass(BigDecimal.class)
//                     .value("var20").isOfClass(Double.class)
//                     .value("var21").isOfClass(Double.class)
//                     .value("var22").isOfClass(Double.class)
//                     .value("var23").isOfClass(Float.class)
//                     .value("var24").isOfClass(Float.class)
//                     .value("var25").isOfClass(Time.class)
//                     .value("var26").isOfClass(Date.class)
//                     .value("var27").isOfClass(Timestamp.class)
//                     .value("var28").isOfClass(Timestamp.class)
//                     .value("var29").isOfClass(Timestamp.class)
//                     .value("var30").isOfClass(byte[].class)
//                     .value("var31").isOfClass(byte[].class)
//                     .value("var32").isOfClass(byte[].class)
//                     .value("var33").isOfClass(byte[].class)
//                     .value("var34").isOfClass(byte[].class)
//                     .value("var35").isOfClass(Locale.class)
//                     .value("var36").isOfClass(String.class)
//                     .value("var37").isOfClass(String.class)
//                     .value("var38").isOfClass(String.class)
//                     .value("var39").isOfClass(String.class)
//                     .value("var40").isOfClass(String.class)
//                     .value("var41").isOfClass(String.class)
//                     .value("var42").isOfClass(String.class)
//                     .value("var43").isOfClass(String.class)
//                     .value("var44").isOfClass(String.class)
//                     .value("var45").isOfClass(String.class)
//                     .value("var46").isOfClass(byte[].class)
//                     .value("var47").isOfClass(byte[].class)
//                     .value("var48").isOfClass(byte[].class)
//                     .value("var49").isOfClass(byte[].class)
//                     .value("var50").isOfClass(byte[].class)
//                     .value("var51").isOfClass(byte[].class)
//                     .value("var52").isOfClass(String.class)
//                     .value("var53").isOfClass(String.class)
//                     .value("var54").isOfClass(String.class)
//                     .value("var55").isOfClass(String.class)
//                     .value("var56").isOfClass(String.class)
//                     .value("var57").isOfClass(String.class)
//                     .value("var58").isOfClass(String.class)
//                     .value("var59").isOfClass(UUID.class)
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change().rowAtStartPoint()
//                       .value("var1").isOfClass(Long.class)
//                       .value("var2").isOfClass(Integer.class)
//                       .value("var3").isOfClass(Integer.class)
//                       .value("var4").isOfClass(Integer.class)
//                       .value("var5").isOfClass(Integer.class)
//                       .value("var6").isOfClass(Integer.class)
//                       .value("var7").isOfClass(Boolean.class)
//                       .value("var8").isOfClass(Boolean.class)
//                       .value("var9").isOfClass(Boolean.class)
//                       .value("var10").isOfClass(Byte.class)
//                       .value("var11").isOfClass(Short.class)
//                       .value("var12").isOfClass(Short.class)
//                       .value("var13").isOfClass(Short.class)
//                       .value("var14").isOfClass(Long.class)
//                       .value("var15").isOfClass(Long.class)
//                       .value("var16").isOfClass(BigDecimal.class)
//                       .value("var17").isOfClass(BigDecimal.class)
//                       .value("var18").isOfClass(BigDecimal.class)
//                       .value("var19").isOfClass(BigDecimal.class)
//                       .value("var20").isOfClass(Double.class)
//                       .value("var21").isOfClass(Double.class)
//                       .value("var22").isOfClass(Double.class)
//                       .value("var23").isOfClass(Float.class)
//                       .value("var24").isOfClass(Float.class)
//                       .value("var25").isOfClass(Time.class)
//                       .value("var26").isOfClass(Date.class)
//                       .value("var27").isOfClass(Timestamp.class)
//                       .value("var28").isOfClass(Timestamp.class)
//                       .value("var29").isOfClass(Timestamp.class)
//                       .value("var30").isOfClass(byte[].class)
//                       .value("var31").isOfClass(byte[].class)
//                       .value("var32").isOfClass(byte[].class)
//                       .value("var33").isOfClass(byte[].class)
//                       .value("var34").isOfClass(byte[].class)
//                       .value("var35").isOfClass(Locale.class)
//                       .value("var36").isOfClass(String.class)
//                       .value("var37").isOfClass(String.class)
//                       .value("var38").isOfClass(String.class)
//                       .value("var39").isOfClass(String.class)
//                       .value("var40").isOfClass(String.class)
//                       .value("var41").isOfClass(String.class)
//                       .value("var42").isOfClass(String.class)
//                       .value("var43").isOfClass(String.class)
//                       .value("var44").isOfClass(String.class)
//                       .value("var45").isOfClass(String.class)
//                       .value("var46").isOfClass(byte[].class)
//                       .value("var47").isOfClass(byte[].class)
//                       .value("var48").isOfClass(byte[].class)
//                       .value("var49").isOfClass(byte[].class)
//                       .value("var50").isOfClass(byte[].class)
//                       .value("var51").isOfClass(byte[].class)
//                       .value("var52").isOfClass(String.class)
//                       .value("var53").isOfClass(String.class)
//                       .value("var54").isOfClass(String.class)
//                       .value("var55").isOfClass(String.class)
//                       .value("var56").isOfClass(String.class)
//                       .value("var57").isOfClass(String.class)
//                       .value("var58").isOfClass(String.class)
//                       .value("var59").isOfClass(UUID.class)
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ValueEquality_isEqualTo() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).row()
//                     .value("var1").isEqualTo(1)
//                     .value("var2").isEqualTo(20)
//                     .value("var3").isEqualTo(3)
//                     .value("var4").isEqualTo(4)
//                     .value("var5").isEqualTo(5)
//                     .value("var6").isEqualTo(6)
//                     .value("var7").isEqualTo(true)
//                     .value("var8").isEqualTo(false)
//                     .value("var9").isEqualTo(true)
//                     .value("var10").isEqualTo(7)
//                     .value("var11").isEqualTo(8)
//                     .value("var12").isEqualTo(9)
//                     .value("var13").isEqualTo(10)
//                     .value("var14").isEqualTo(11)
//                     .value("var15").isEqualTo(12)
//                     .value("var16").isEqualTo(13.13)
//                     .value("var17").isEqualTo(14.14)
//                     .value("var18").isEqualTo(15.15)
//                     .value("var19").isEqualTo(16.16)
//                     .value("var20").isEqualTo(17.17)
//                     .value("var21").isEqualTo(18.18)
//                     .value("var22").isEqualTo(19.19)
//                     .value("var23").isEqualTo(20.20)
//                     .value("var24").isEqualTo(21.21)
//                     .value("var25").isEqualTo(TimeValue.of(9, 1))
//                     .value("var26").isEqualTo(DateValue.of(2007, 12, 23))
//                     .value("var27").isEqualTo(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .value("var28").isEqualTo(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .value("var29").isEqualTo(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                     .value("var30").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var31").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var32").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var33").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var34").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var35").isEqualTo(Locale.FRENCH)
//                     .value("var36").isEqualTo("22")
//                     .value("var37").isEqualTo("23")
//                     .value("var38").isEqualTo("24")
//                     .value("var39").isEqualTo("25")
//                     .value("var40").isEqualTo("26")
//                     .value("var41").isEqualTo("27")
//                     .value("var42").isEqualTo("28")
//                     .value("var43").isEqualTo("29")
//                     .value("var44").isEqualTo("30")
//                     .value("var45").isEqualTo("31")
//                     .value("var46").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var47").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var48").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var49").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var50").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var51").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                     .value("var52").isEqualTo("32")
//                     .value("var53").isEqualTo("33")
//                     .value("var54").isEqualTo("34")
//                     .value("var55").isEqualTo("35")
//                     .value("var56").isEqualTo("36")
//                     .value("var57").isEqualTo("37")
//                     .value("var58").isEqualTo("38")
//                     .value("var59").isEqualTo(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change().rowAtStartPoint()
//                       .value("var1").isEqualTo(1)
//                       .value("var2").isEqualTo(2)
//                       .value("var3").isEqualTo(3)
//                       .value("var4").isEqualTo(4)
//                       .value("var5").isEqualTo(5)
//                       .value("var6").isEqualTo(6)
//                       .value("var7").isEqualTo(true)
//                       .value("var8").isEqualTo(false)
//                       .value("var9").isEqualTo(true)
//                       .value("var10").isEqualTo(7)
//                       .value("var11").isEqualTo(8)
//                       .value("var12").isEqualTo(9)
//                       .value("var13").isEqualTo(10)
//                       .value("var14").isEqualTo(11)
//                       .value("var15").isEqualTo(12)
//                       .value("var16").isEqualTo(13.13)
//                       .value("var17").isEqualTo(14.14)
//                       .value("var18").isEqualTo(15.15)
//                       .value("var19").isEqualTo(16.16)
//                       .value("var20").isEqualTo(17.17)
//                       .value("var21").isEqualTo(18.18)
//                       .value("var22").isEqualTo(19.19)
//                       .value("var23").isEqualTo(20.20)
//                       .value("var24").isEqualTo(21.21)
//                       .value("var25").isEqualTo(TimeValue.of(9, 1))
//                       .value("var26").isEqualTo(DateValue.of(2007, 12, 23))
//                       .value("var27").isEqualTo(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .value("var28").isEqualTo(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .value("var29").isEqualTo(DateTimeValue.of(DateValue.of(2007, 12, 23), TimeValue.of(9, 1)))
//                       .value("var30").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var31").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var32").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var33").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var34").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var35").isEqualTo(Locale.FRENCH)
//                       .value("var36").isEqualTo("22")
//                       .value("var37").isEqualTo("23")
//                       .value("var38").isEqualTo("24")
//                       .value("var39").isEqualTo("25")
//                       .value("var40").isEqualTo("26")
//                       .value("var41").isEqualTo("27")
//                       .value("var42").isEqualTo("28")
//                       .value("var43").isEqualTo("29")
//                       .value("var44").isEqualTo("30")
//                       .value("var45").isEqualTo("31")
//                       .value("var46").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var47").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var48").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var49").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var50").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var51").isEqualTo(bytesContentFromClassPathOf("h2-logo-2.png"))
//                       .value("var52").isEqualTo("32")
//                       .value("var53").isEqualTo("33")
//                       .value("var54").isEqualTo("34")
//                       .value("var55").isEqualTo("35")
//                       .value("var56").isEqualTo("36")
//                       .value("var57").isEqualTo("37")
//                       .value("var58").isEqualTo("38")
//                       .value("var59").isEqualTo(UUID.fromString("30B443AE-C0C9-4790-9BEC-CE1380808435"))
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ValueNonEquality_isNotEqualTo() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).row()
//                     .value("var1").isNotEqualTo(10)
//                     .value("var2").isNotEqualTo(200)
//                     .value("var3").isNotEqualTo(30)
//                     .value("var4").isNotEqualTo(40)
//                     .value("var5").isNotEqualTo(50)
//                     .value("var6").isNotEqualTo(60)
//                     .value("var7").isNotEqualTo(false)
//                     .value("var8").isNotEqualTo(true)
//                     .value("var9").isNotEqualTo(false)
//                     .value("var10").isNotEqualTo(70)
//                     .value("var11").isNotEqualTo(80)
//                     .value("var12").isNotEqualTo(90)
//                     .value("var13").isNotEqualTo(100)
//                     .value("var14").isNotEqualTo(110)
//                     .value("var15").isNotEqualTo(120)
//                     .value("var16").isNotEqualTo(130.13)
//                     .value("var17").isNotEqualTo(140.14)
//                     .value("var18").isNotEqualTo(150.15)
//                     .value("var19").isNotEqualTo(160.16)
//                     .value("var20").isNotEqualTo(170.17)
//                     .value("var21").isNotEqualTo(180.18)
//                     .value("var22").isNotEqualTo(190.19)
//                     .value("var23").isNotEqualTo(200.20)
//                     .value("var24").isNotEqualTo(210.21)
//                     .value("var25").isNotEqualTo(TimeValue.of(9, 10))
//                     .value("var26").isNotEqualTo(DateValue.of(2006, 12, 23))
//                     .value("var27").isNotEqualTo(DateTimeValue.of(DateValue.of(2006, 12, 23), TimeValue.of(9, 1)))
//                     .value("var28").isNotEqualTo(DateTimeValue.of(DateValue.of(2006, 12, 23), TimeValue.of(9, 1)))
//                     .value("var29").isNotEqualTo(DateTimeValue.of(DateValue.of(2006, 12, 23), TimeValue.of(9, 1)))
//                     .value("var30").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var31").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var32").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var33").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var34").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var35").isNotEqualTo(Locale.ENGLISH)
//                     .value("var36").isNotEqualTo("220")
//                     .value("var37").isNotEqualTo("230")
//                     .value("var38").isNotEqualTo("240")
//                     .value("var39").isNotEqualTo("250")
//                     .value("var40").isNotEqualTo("260")
//                     .value("var41").isNotEqualTo("270")
//                     .value("var42").isNotEqualTo("280")
//                     .value("var43").isNotEqualTo("290")
//                     .value("var44").isNotEqualTo("300")
//                     .value("var45").isNotEqualTo("310")
//                     .value("var46").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var47").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var48").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var49").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var50").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var51").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                     .value("var52").isNotEqualTo("320")
//                     .value("var53").isNotEqualTo("330")
//                     .value("var54").isNotEqualTo("340")
//                     .value("var55").isNotEqualTo("350")
//                     .value("var56").isNotEqualTo("360")
//                     .value("var57").isNotEqualTo("370")
//                     .value("var58").isNotEqualTo("380")
//                     .value("var59").isNotEqualTo(UUID.fromString("16319617-AE95-4087-9264-D3D21BF611B6"))
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change().rowAtStartPoint()
//                       .value("var1").isNotEqualTo(10)
//                       .value("var2").isNotEqualTo(20)
//                       .value("var3").isNotEqualTo(30)
//                       .value("var4").isNotEqualTo(40)
//                       .value("var5").isNotEqualTo(50)
//                       .value("var6").isNotEqualTo(60)
//                       .value("var7").isNotEqualTo(false)
//                       .value("var8").isNotEqualTo(true)
//                       .value("var9").isNotEqualTo(false)
//                       .value("var10").isNotEqualTo(70)
//                       .value("var11").isNotEqualTo(80)
//                       .value("var12").isNotEqualTo(90)
//                       .value("var13").isNotEqualTo(100)
//                       .value("var14").isNotEqualTo(110)
//                       .value("var15").isNotEqualTo(120)
//                       .value("var16").isNotEqualTo(130.13)
//                       .value("var17").isNotEqualTo(140.14)
//                       .value("var18").isNotEqualTo(150.15)
//                       .value("var19").isNotEqualTo(160.16)
//                       .value("var20").isNotEqualTo(170.17)
//                       .value("var21").isNotEqualTo(180.18)
//                       .value("var22").isNotEqualTo(190.19)
//                       .value("var23").isNotEqualTo(200.20)
//                       .value("var24").isNotEqualTo(210.21)
//                       .value("var25").isNotEqualTo(TimeValue.of(9, 10))
//                       .value("var26").isNotEqualTo(DateValue.of(2006, 12, 23))
//                       .value("var27").isNotEqualTo(DateTimeValue.of(DateValue.of(2006, 12, 23), TimeValue.of(9, 1)))
//                       .value("var28").isNotEqualTo(DateTimeValue.of(DateValue.of(2006, 12, 23), TimeValue.of(9, 1)))
//                       .value("var29").isNotEqualTo(DateTimeValue.of(DateValue.of(2006, 12, 23), TimeValue.of(9, 1)))
//                       .value("var30").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var31").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var32").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var33").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var34").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var35").isNotEqualTo(Locale.ENGLISH)
//                       .value("var36").isNotEqualTo("220")
//                       .value("var37").isNotEqualTo("230")
//                       .value("var38").isNotEqualTo("240")
//                       .value("var39").isNotEqualTo("250")
//                       .value("var40").isNotEqualTo("260")
//                       .value("var41").isNotEqualTo("270")
//                       .value("var42").isNotEqualTo("280")
//                       .value("var43").isNotEqualTo("290")
//                       .value("var44").isNotEqualTo("300")
//                       .value("var45").isNotEqualTo("310")
//                       .value("var46").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var47").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var48").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var49").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var50").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var51").isNotEqualTo(bytesContentFromClassPathOf("logo-dev.jpg"))
//                       .value("var52").isNotEqualTo("320")
//                       .value("var53").isNotEqualTo("330")
//                       .value("var54").isNotEqualTo("340")
//                       .value("var55").isNotEqualTo("350")
//                       .value("var56").isNotEqualTo("360")
//                       .value("var57").isNotEqualTo("370")
//                       .value("var58").isNotEqualTo("380")
//                       .value("var59").isNotEqualTo(UUID.fromString("16319617-AE95-4087-9264-D3D21BF611B6"))
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
//
//  @Test
//  @NeedReload
//  public void test_ValueType_isOfType() {
//    Table table = new Table(source, "test");
//    Changes changes = new Changes(table).setStartPointNow();
//    update();
//    changes.setEndPointNow();
//
//    assertThat(table).row()
//                     .value("var1").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var2").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var3").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var4").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var5").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var6").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var7").isBoolean().isOfType(ValueType.BOOLEAN)
//                     .value("var8").isBoolean().isOfType(ValueType.BOOLEAN)
//                     .value("var9").isBoolean().isOfType(ValueType.BOOLEAN)
//                     .value("var10").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var11").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var12").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var13").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var14").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var15").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var16").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var17").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var18").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var19").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var20").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var21").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var22").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var23").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var24").isNumber().isOfType(ValueType.NUMBER)
//                     .value("var25").isTime().isOfType(ValueType.TIME)
//                     .value("var26").isDate().isOfType(ValueType.DATE)
//                     .value("var27").isDateTime().isOfType(ValueType.DATE_TIME)
//                     .value("var28").isDateTime().isOfType(ValueType.DATE_TIME)
//                     .value("var29").isDateTime().isOfType(ValueType.DATE_TIME)
//                     .value("var30").isBytes().isOfType(ValueType.BYTES)
//                     .value("var31").isBytes().isOfType(ValueType.BYTES)
//                     .value("var32").isBytes().isOfType(ValueType.BYTES)
//                     .value("var33").isBytes().isOfType(ValueType.BYTES)
//                     .value("var34").isBytes().isOfType(ValueType.BYTES)
//                     .value("var35")
//                     .value("var36").isText().isOfType(ValueType.TEXT)
//                     .value("var37").isText().isOfType(ValueType.TEXT)
//                     .value("var38").isText().isOfType(ValueType.TEXT)
//                     .value("var39").isText().isOfType(ValueType.TEXT)
//                     .value("var40").isText().isOfType(ValueType.TEXT)
//                     .value("var41").isText().isOfType(ValueType.TEXT)
//                     .value("var42").isText().isOfType(ValueType.TEXT)
//                     .value("var43").isText().isOfType(ValueType.TEXT)
//                     .value("var44").isText().isOfType(ValueType.TEXT)
//                     .value("var45").isText().isOfType(ValueType.TEXT)
//                     .value("var46").isBytes().isOfType(ValueType.BYTES)
//                     .value("var47").isBytes().isOfType(ValueType.BYTES)
//                     .value("var48").isBytes().isOfType(ValueType.BYTES)
//                     .value("var49").isBytes().isOfType(ValueType.BYTES)
//                     .value("var50").isBytes().isOfType(ValueType.BYTES)
//                     .value("var51").isBytes().isOfType(ValueType.BYTES)
//                     .value("var52").isText().isOfType(ValueType.TEXT)
//                     .value("var53").isText().isOfType(ValueType.TEXT)
//                     .value("var54").isText().isOfType(ValueType.TEXT)
//                     .value("var55").isText().isOfType(ValueType.TEXT)
//                     .value("var56").isText().isOfType(ValueType.TEXT)
//                     .value("var57").isText().isOfType(ValueType.TEXT)
//                     .value("var58").isText().isOfType(ValueType.TEXT)
//                     .value("var59").isUUID().isOfType(ValueType.UUID)
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//
//    assertThat(changes).change().rowAtStartPoint()
//                       .value("var1").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var2").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var3").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var4").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var5").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var6").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var7").isBoolean().isOfType(ValueType.BOOLEAN)
//                       .value("var8").isBoolean().isOfType(ValueType.BOOLEAN)
//                       .value("var9").isBoolean().isOfType(ValueType.BOOLEAN)
//                       .value("var10").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var11").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var12").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var13").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var14").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var15").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var16").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var17").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var18").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var19").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var20").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var21").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var22").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var23").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var24").isNumber().isOfType(ValueType.NUMBER)
//                       .value("var25").isTime().isOfType(ValueType.TIME)
//                       .value("var26").isDate().isOfType(ValueType.DATE)
//                       .value("var27").isDateTime().isOfType(ValueType.DATE_TIME)
//                       .value("var28").isDateTime().isOfType(ValueType.DATE_TIME)
//                       .value("var29").isDateTime().isOfType(ValueType.DATE_TIME)
//                       .value("var30").isBytes().isOfType(ValueType.BYTES)
//                       .value("var31").isBytes().isOfType(ValueType.BYTES)
//                       .value("var32").isBytes().isOfType(ValueType.BYTES)
//                       .value("var33").isBytes().isOfType(ValueType.BYTES)
//                       .value("var34").isBytes().isOfType(ValueType.BYTES)
//                       .value("var35")
//                       .value("var36").isText().isOfType(ValueType.TEXT)
//                       .value("var37").isText().isOfType(ValueType.TEXT)
//                       .value("var38").isText().isOfType(ValueType.TEXT)
//                       .value("var39").isText().isOfType(ValueType.TEXT)
//                       .value("var40").isText().isOfType(ValueType.TEXT)
//                       .value("var41").isText().isOfType(ValueType.TEXT)
//                       .value("var42").isText().isOfType(ValueType.TEXT)
//                       .value("var43").isText().isOfType(ValueType.TEXT)
//                       .value("var44").isText().isOfType(ValueType.TEXT)
//                       .value("var45").isText().isOfType(ValueType.TEXT)
//                       .value("var46").isBytes().isOfType(ValueType.BYTES)
//                       .value("var47").isBytes().isOfType(ValueType.BYTES)
//                       .value("var48").isBytes().isOfType(ValueType.BYTES)
//                       .value("var49").isBytes().isOfType(ValueType.BYTES)
//                       .value("var50").isBytes().isOfType(ValueType.BYTES)
//                       .value("var51").isBytes().isOfType(ValueType.BYTES)
//                       .value("var52").isText().isOfType(ValueType.TEXT)
//                       .value("var53").isText().isOfType(ValueType.TEXT)
//                       .value("var54").isText().isOfType(ValueType.TEXT)
//                       .value("var55").isText().isOfType(ValueType.TEXT)
//                       .value("var56").isText().isOfType(ValueType.TEXT)
//                       .value("var57").isText().isOfType(ValueType.TEXT)
//                       .value("var58").isText().isOfType(ValueType.TEXT)
//                       .value("var59").isUUID().isOfType(ValueType.UUID)
//            .value("var60")  // ARRAY is not implemented (no idea of the goal so wait a issue from user)
//            .value("var61")  // GEOMETRY is not implemented (no idea of the goal so wait a issue from user)
//    ;
//  }
}
